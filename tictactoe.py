# -*- coding: utf-8 -*-
"""tictactoe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ggqvPzRUv-yhPkHhDOl4bTdbYJa7wyw
"""

def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

def display_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

def check_winner(board, player):
    # Check rows, columns and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]):
            return True
        if all([board[j][i] == player for j in range(3)]):
            return True
    if all([board[i][i] == player for i in range(3)]):
        return True
    if all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

def is_board_full(board):
    return all([cell != ' ' for row in board for cell in row])

def game_over(board):
    return check_winner(board, 'X') or check_winner(board, 'O') or is_board_full(board)

minimax_nodes = 0

def minimax(board, depth, is_maximizing, ai_symbol, human_symbol):
    global minimax_nodes
    minimax_nodes += 1

    if check_winner(board, ai_symbol):
        return 1
    if check_winner(board, human_symbol):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = ai_symbol
                    score = minimax(board, depth + 1, False, ai_symbol, human_symbol)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = human_symbol
                    score = minimax(board, depth + 1, True, ai_symbol, human_symbol)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
        return best_score

def best_move_minimax(board, ai_symbol, human_symbol):
    best_score = -float('inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = ai_symbol
                score = minimax(board, 0, False, ai_symbol, human_symbol)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

alphabeta_nodes = 0

def minimax_alpha_beta(board, depth, is_maximizing, alpha, beta, ai_symbol, human_symbol):
    global alphabeta_nodes
    alphabeta_nodes += 1

    if check_winner(board, ai_symbol):
        return 1
    if check_winner(board, human_symbol):
        return -1
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = ai_symbol
                    score = minimax_alpha_beta(board, depth + 1, False, alpha, beta, ai_symbol, human_symbol)
                    board[i][j] = ' '
                    best_score = max(score, best_score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = human_symbol
                    score = minimax_alpha_beta(board, depth + 1, True, alpha, beta, ai_symbol, human_symbol)
                    board[i][j] = ' '
                    best_score = min(score, best_score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break
        return best_score

def best_move_alpha_beta(board, ai_symbol, human_symbol):
    best_score = -float('inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = ai_symbol
                score = minimax_alpha_beta(board, 0, False, -float('inf'), float('inf'), ai_symbol, human_symbol)
                board[i][j] = ' '
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def play_game():
    global minimax_nodes, alphabeta_nodes

    print("Welcome to Tic-Tac-Toe AI!\n")

    while True:
        algo_choice = input("Select AI Algorithm:\n1. Minimax\n2. Alpha-Beta Pruning\nEnter 1 or 2: ")
        if algo_choice in ['1', '2']:
            break
        else:
            print("Invalid input. Please enter 1 or 2.")

    while True:
        user_symbol = input("Choose your symbol (X or O): ").upper()
        if user_symbol in ['X', 'O']:
            break
        else:
            print("Invalid input. Please enter X or O.")

    ai_symbol = 'O' if user_symbol == 'X' else 'X'
    human_turn = True if user_symbol == 'X' else False

    # Initialize board
    board = create_board()
    minimax_nodes = 0
    alphabeta_nodes = 0

    # Game loop
    while not game_over(board):
        display_board(board)
        if human_turn:
            while True:
                try:
                    row = int(input("Enter your move row (0-2): "))
                    col = int(input("Enter your move col (0-2): "))
                    if board[row][col] == ' ':
                        board[row][col] = user_symbol
                        break
                    else:
                        print("Cell already occupied! Try again.")
                except (ValueError, IndexError):
                    print("Invalid input. Enter row and column between 0 and 2.")
        else:
            print("AI is thinking...")
            if algo_choice == '1':
                move = best_move_minimax(board, ai_symbol, user_symbol)
            else:
                move = best_move_alpha_beta(board, ai_symbol, user_symbol)
            if move:
                board[move[0]][move[1]] = ai_symbol
        human_turn = not human_turn

    # Final board
    display_board(board)

    # Results
    if check_winner(board, user_symbol):
        print("Congratulations! You win!")
    elif check_winner(board, ai_symbol):
        print("AI wins! Better luck next time.")
    else:
        print("It's a draw!")

    if algo_choice == '1':
        print(f"Nodes visited (Minimax): {minimax_nodes}")
    else:
        print(f"Nodes visited (Alpha-Beta Pruning): {alphabeta_nodes}")

while True:
    play_game()
    again = input("\nDo you want to play again? (y/n): ").lower()
    if again != 'y':
        print("Thanks for playing! Goodbye.")
        break

